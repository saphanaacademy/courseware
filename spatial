----------------------------
--                        --
--                        --
--  Geo-Spatial Overview  --
--                        --
--                        --
----------------------------


----------------------------------------------------------
--
--  constructing geo-spatial data from decimal type data
--
----------------------------------------------------------

SELECT	TOP 10 "ROWID",
	NAME,
	COORDINATES_LON AS LON,
	COORDINATES_LAT AS LAT, 	
	NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT) AS LON_LAT_POINT
FROM GEO_SPATIAL.CENSUS
ORDER BY "ROWID" ASC;


-------------------------------------------------------
--
--  create table with 3 different geo-spatial systems
--
-------------------------------------------------------

DROP TABLE GEO_SPATIAL.CENSUS_GEO;

CREATE COLUMN TABLE GEO_SPATIAL.CENSUS_GEO 
	LIKE GEO_SPATIAL.CENSUS WITH NO DATA;

ALTER TABLE GEO_SPATIAL.CENSUS_GEO ADD (
	LONLAT_POINT_0 ST_GEOMETRY(0)
);

ALTER TABLE GEO_SPATIAL.CENSUS_GEO ADD (
	LONLAT_POINT_1000004326 ST_GEOMETRY(1000004326)
);

ALTER TABLE GEO_SPATIAL.CENSUS_GEO ADD (
	LONLAT_POINT_4326 ST_GEOMETRY(4326)
);

-- inserting spatial type data & point type construction

INSERT INTO GEO_SPATIAL.CENSUS_GEO (
	SELECT	*,
		NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT),
		NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT),
		NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT)
	FROM GEO_SPATIAL.CENSUS
);

SELECT * FROM GEO_SPATIAL.CENSUS_GEO;


-------------------------------------------------
--
--  viewing spatial data from 3 different SRS's  
--
-------------------------------------------------

-- viewing spatial type data as is from 3 different spatial reference systems

SELECT	TOP 10 "ROWID", 
	COORDINATES_LON, 
	COORDINATES_LAT, 
	LONLAT_POINT_0, 
	LONLAT_POINT_1000004326, 
	LONLAT_POINT_4326 
FROM GEO_SPATIAL.CENSUS_GEO
ORDER BY "ROWID" ASC;

-- viewing spatial type data using various representation methods

SELECT	TOP 10 "ROWID", 
	COORDINATES_LON, 
	COORDINATES_LAT, 
	LONLAT_POINT_0.ST_AsWKT(),
	LONLAT_POINT_0.ST_AsEWKT(),
	LONLAT_POINT_1000004326.ST_AsWKB(), 
	LONLAT_POINT_1000004326.ST_AsBinary(),
	LONLAT_POINT_4326.ST_AsGeoJSON(),
	LONLAT_POINT_4326.ST_AsSVG()
FROM GEO_SPATIAL.CENSUS_GEO
ORDER BY "ROWID" ASC; 
 
 
-------------------------------------------------------------------------
--
--  adding geo-spatial data when there is a binary column for the point
--
-------------------------------------------------------------------------

ALTER TABLE GEO_SPATIAL.CENSUS_BINARY DROP (LONLAT_POINT);

SELECT * FROM GEO_SPATIAL.CENSUS_BINARY;

-- adding a geo (point) column and converting binary data into spatial type point data

ALTER TABLE GEO_SPATIAL.CENSUS_BINARY ADD (LONLAT_POINT ST_POINT(0));

UPDATE GEO_SPATIAL.CENSUS_BINARY SET LONLAT_POINT = (
	WITH C AS (
		SELECT	"ROWID", 
			ST_GeomFromWKB(LONLAT_BINARY) AS NEWPOINT 
		FROM GEO_SPATIAL.CENSUS_BINARY
	) 
	SELECT NEWPOINT FROM C
	WHERE CENSUS_BINARY."ROWID" = C."ROWID"
);

SELECT *, LONLAT_POINT.ST_AsWKT() FROM GEO_SPATIAL.CENSUS_BINARY;


-------------------------------------------------------------
--
--  doing some distance calculations using different SRID's
--
-------------------------------------------------------------

-- Palo Alto office to Vancouver office 

WITH A AS (
	SELECT  -- Palo Alto office in 3 different SRS
		NEW ST_Point('POINT(-122.1463709 37.3989354)') AS PA,
		NEW ST_Point('POINT(-122.1463709 37.3989354)', 1000004326) AS PA_1000004326,
		NEW ST_Point('POINT(-122.1463709 37.3989354)', 4326) AS PA_4326,	  
	 	-- Vancouver office in 3 different SRS	 
		NEW ST_Point('POINT(-123.1208974 49.2766576)') AS VN,
		NEW ST_Point('POINT(-123.1208974 49.2766576)', 1000004326) AS VN_1000004326,	 
		NEW ST_Point('POINT(-123.1208974 49.2766576)', 4326) AS VN_4326
	FROM DUMMY
)
SELECT	PA.ST_AsWKT(),
	VN.ST_AsWKT(),
	VN.ST_DISTANCE(PA, 'kilometer') AS DIST_0,
	VN_1000004326.ST_DISTANCE(PA_1000004326, 'kilometer') AS DIST_1000004326,
	VN_4326.ST_DISTANCE(PA_4326, 'kilometer') AS DIST_4326
FROM A;

 
----------------------------------
--
--  performance of different SRS
--
----------------------------------

-- calculations using points within a polygon

-- st_within & srid 0
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND LONLAT_POINT_0.ST_Within(NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',0)) = 1;

-- st_within & srid 1000004326       
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND LONLAT_POINT_1000004326.ST_Within(NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',1000004326)) = 1; 
    
-- st_contains & srid 1000004326           
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',1000004326).ST_Contains(LONLAT_POINT_1000004326) = 1;

-- st_covered by & srid 4326       
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND LONLAT_POINT_4326.ST_CoveredBy(NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',4326)) = 1;
	
	
-------------------------------------
--
--  using the ST_Transform() method
--
-------------------------------------

-- constructing a transform & using in a distance calc

SELECT	TOP 10 
	"ROWID", 
 	LONLAT_POINT_1000004326.ST_SRID() AS SRID, 
 	LONLAT_POINT_1000004326.ST_Transform(4326).ST_SRID() AS TRANS_SRID
	--,LONLAT_POINT_1000004326.ST_Transform(4326).ST_DISTANCE(
	--	NEW ST_Point('POINT(-123.1208974 49.2766576)', 4326), 'kilometer'
	--) AS DIST_TO_VAN
	--,LONLAT_POINT_0.ST_Transform(4326)
FROM GEO_SPATIAL.CENSUS_GEO
ORDER BY "ROWID" ASC; 

-- what spatial systems are available and how do they work together

SELECT TRANSFORM_DEFINITION, SRS_ID FROM ST_SPATIAL_REFERENCE_SYSTEMS;	


------------------------------------
--
--  subtypes of geometry supertype
--
------------------------------------

-- create a table with geometry supertype and an identity

DROP TABLE GEO_SPATIAL.GEOTYPES;
CREATE COLUMN TABLE GEO_SPATIAL.GEOTYPES (
	ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	SHAPE ST_GEOMETRY(0)
);

-- add each of the 8 spatial subtypes

-- circularstring
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_CircularString('CIRCULARSTRING(0 0, 1 1, 0 2)')
);
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_CircularString('CIRCULARSTRING(0 0, 1 1, 0 2, -1 1, 0 0 )')
);

-- linestring
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_LineString('LineString (0 0, 5 10)')
);
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_LineString('LineString (0 0, 5 10, 5 6)')
);

-- multi-line string
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_MultiLineString('MultiLineString ((10 10, 12 12), (14 10, 16 12))')
);

-- point
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_Point('Point (10 10)')
);

-- multi-point
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_MultiPoint('MultiPoint ((10 10), (12 12), (14 10))')
);

-- polygon
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_Polygon('Polygon ((-5 -5, 5 -5, 0 5, -5 -5))')
);

-- multi-polygon
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_MultiPolygon('MultiPolygon (((-5 -5, 5 -5, 0 5, -5 -5), (-2 -2, -2 0, 2 0, 2 -2, -2 -2)), ((10 -5, 15 5, 5 5, 10 -5)))')
);

-- geometry collection
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	New ST_GeometryCollection( 'GeometryCollection (LineString(5 10, 10 12, 15 10), Polygon ((10 -5, 15 5, 5 5, 10 -5)))')
);

SELECT	*,
	SHAPE.ST_AsWKT() AS SHAPE
FROM GEO_SPATIAL.GEOTYPES;

-- polygon with issues
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_Polygon('Polygon ((-5 -5, 5 -5, 0 5, -6 -6))')
);


--------------------------------
--
--  multi-dimensional geo data
--
--------------------------------

-- create table and add data, some multi-dimensional, to table

DROP TABLE GEO_SPATIAL.GEOMULTIDIM;
CREATE COLUMN TABLE GEO_SPATIAL.GEOMULTIDIM (
	ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
 	GEO ST_GEOMETRY
 );  

INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT (5.0 6.0)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT Z(5.0 6.0 8.0)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT M(5.0 6.0 1400)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT ZM(2 3 4 1000)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT()
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_LINESTRING('LINESTRING ZM(3 3 4 2500, 5 4 2 2600, 6 3 3 2200)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_LINESTRING()
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POLYGON('POLYGON ZM((6 7 4 1800, 10 3 4 1850, 10 10 4 1900, 6 7 4 1800))')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POLYGON()
);

-- use some multi-dimensional methods to retrieve values

SELECT	ID, 
	GEO.ST_AsWKT(),
	--GEO.ST_Z(), 
	GEO.ST_ZMAX(), 
	GEO.ST_ZMIN(),
	--GEO.ST_M(), 
	GEO.ST_MMAX(), 
	GEO.ST_MMIN()
FROM GEO_SPATIAL.GEOMULTIDIM; 

-- return only 3d or measured points

SELECT	ID, 
	GEO.ST_AsWKT(),
	CASE GEO.ST_Is3D()
 		WHEN 1 THEN GEO.ST_Z()
 		END,
	CASE GEO.ST_IsMeasured()
 		WHEN 1 THEN GEO.ST_M()
 		END
FROM GEO_SPATIAL.GEOMULTIDIM
WHERE GEO.ST_GeometryType() = 'ST_Point' 
	AND (GEO.ST_Is3D() = 1 
	OR GEO.ST_IsMeasured() = 1);
