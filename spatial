----------------------------
--                        --
--                        --
--  Spatial Overview      --
--                        --
--                        --
----------------------------

-- right click on HDB (SYSTEM) hanadb connection
-- choose Open SQL Console


-- look at existing records in a non "spatial" table by running the following query

SELECT TOP 10
	"ROWID",
	NAME,
	COORDINATES_LON AS LON,
	COORDINATES_LAT AS LAT
FROM GEO_SPATIAL.CENSUS
ORDER BY "ROWID" ASC;

-- highlight GEO_SPATIAL.CENSUS above then right click and 
	-- choose Show Definition and scroll to bottom of fields
-- note that the "Lon" & "Lat" fields are actually Decimal types


----------------------------------------------------------
--
--  constructing geo-spatial data from decimal type data
--
----------------------------------------------------------

SELECT TOP 10 
	"ROWID",
	NAME,
	COORDINATES_LON AS LON,
	COORDINATES_LAT AS LAT, 	
	NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT) AS LON_LAT_POINT
FROM GEO_SPATIAL.CENSUS
ORDER BY "ROWID" ASC;


-------------------------------------------------------
--
--  create table to have columns of 3 spatial systems
--
-------------------------------------------------------

DROP TABLE GEO_SPATIAL.CENSUS_GEO;

CREATE COLUMN TABLE GEO_SPATIAL.CENSUS_GEO 
	LIKE GEO_SPATIAL.CENSUS WITH NO DATA;

ALTER TABLE GEO_SPATIAL.CENSUS_GEO ADD (
	LONLAT_POINT_CARTESIAN ST_GEOMETRY(0)
);

ALTER TABLE GEO_SPATIAL.CENSUS_GEO ADD (
	LONLAT_POINT_PLANAR ST_GEOMETRY(1000004326)
);

ALTER TABLE GEO_SPATIAL.CENSUS_GEO ADD (
	LONLAT_POINT_SPHEROID ST_GEOMETRY(4326)
);

-- inserting spatial type data & point type construction

INSERT INTO GEO_SPATIAL.CENSUS_GEO (
	SELECT	*,
		NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT),
		NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT),
		NEW ST_POINT(COORDINATES_LON, COORDINATES_LAT)
	FROM GEO_SPATIAL.CENSUS
);


-------------------------------------------------
--
--  viewing spatial data from the 3 different SRS's  
--
-------------------------------------------------

-- viewing spatial type data as is from 3 different spatial reference systems

SELECT	TOP 10 "ROWID", 
	COORDINATES_LON, 
	COORDINATES_LAT, 
	LONLAT_POINT_CARTESIAN, 
	LONLAT_POINT_PLANAR, 
	LONLAT_POINT_SPHEROID 
FROM GEO_SPATIAL.CENSUS_GEO
ORDER BY "ROWID" ASC;

-- viewing spatial type data using various representation methods

SELECT	TOP 10 "ROWID", 
	COORDINATES_LON, 
	COORDINATES_LAT, 
	LONLAT_POINT_CARTESIAN.ST_AsWKT(),
	LONLAT_POINT_CARTESIAN.ST_AsEWKT(),
	LONLAT_POINT_CARTESIAN.ST_AsGeoJSON(),
	LONLAT_POINT_CARTESIAN.ST_AsSVG()
FROM GEO_SPATIAL.CENSUS_GEO
ORDER BY "ROWID" ASC; 
 
 
-------------------------------------------------------------
--
--  doing some distance calculations using different SRID's
--
-------------------------------------------------------------

-- World Cup host to Maidenhead office 

WITH A AS (
	SELECT  -- Maidenhead office in 3 different SRS
		NEW ST_Point('POINT(-0.745713 51.511867)') AS MO,
		NEW ST_Point('POINT(-0.745713 51.511867)', 1000004326) AS MO_PLANAR,
		NEW ST_Point('POINT(-0.745713 51.511867)', 4326) AS MO_SPHEROID,	  
	 	-- World Cup host in 3 different SRS	 
		NEW ST_Point('POINT(-79.379085 43.643676)') AS WCH,
		NEW ST_Point('POINT(-79.379085 43.643676)', 1000004326) AS WCH_PLANAR,	 
		NEW ST_Point('POINT(-79.379085 43.643676)', 4326) AS WCH_SPHEROID
	FROM DUMMY
)
SELECT	
	MO.ST_AsWKT(),
	WCH.ST_AsWKT(),
	WCH.ST_DISTANCE(MO, 'kilometer') AS DIST_CARTESIAN,
	WCH_PLANAR.ST_DISTANCE(MO_PLANAR, 'kilometer') AS DIST_PLANAR,
	WCH_SPHEROID.ST_DISTANCE(MO_SPHEROID, 'kilometer') AS DIST_SPHEROID
FROM A;

 
----------------------------------
--
--  performance of different SRS
--
----------------------------------

-- calculations using points within a polygon

-- st_within & srid 0 / cartesian
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND LONLAT_POINT_CARTESIAN.ST_Within(NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',0)) = 1;

-- st_within & srid 1000004326 / planar       
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND LONLAT_POINT_PLANAR.ST_Within(NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',1000004326)) = 1; 
    
-- st_contains & srid 1000004326 / planar         
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',1000004326).ST_Contains(LONLAT_POINT_PLANAR) = 1;

-- st_covered by & srid 4326 / spheroid       
SELECT 
SUM(POPULATION_TOTAL) AS POP,
COUNT(*) AS POINTS
FROM GEO_SPATIAL.CENSUS_GEO
WHERE LENGTH(CENSUS_GEO_ID) = 11
AND LONLAT_POINT_SPHEROID.ST_CoveredBy(NEW ST_Polygon('Polygon(( 
            -138.9343338012695 40.47433077320648,
            -138.9343338012695 32.89135906381192,
            -100.5920486450195 32.89135906381192,
            -100.5920486450195 40.47433077320648,
            -138.9343338012695 40.47433077320648
       ))',4326)) = 1;
	
	
-------------------------------------
--
--  using the ST_Transform() method
--
-------------------------------------

-- constructing a transform & using in a distance calc

SELECT	TOP 10 
	"ROWID", 
 	LONLAT_POINT_PLANAR.ST_SRID() AS SRID, 
 	LONLAT_POINT_PLANAR.ST_Transform(4326).ST_SRID() AS TRANS_SRID
	--,LONLAT_POINT_PLANAR.ST_Transform(4326).ST_DISTANCE(
	--	NEW ST_Point('POINT(-0.745713 51.511867)', 4326), 'kilometer'
	--) AS DIST_TO_MAIDENHEAD
	--,LONLAT_POINT_CARTESIAN.ST_Transform(4326)
FROM GEO_SPATIAL.CENSUS_GEO
ORDER BY "ROWID" ASC; 

-- what spatial systems are available and how do they work together

SELECT TRANSFORM_DEFINITION, SRS_ID FROM ST_SPATIAL_REFERENCE_SYSTEMS;	


------------------------------------
--
--  subtypes of geometry supertype
--
------------------------------------

-- create a table with geometry supertype and an identity

DROP TABLE GEO_SPATIAL.GEOTYPES;
CREATE COLUMN TABLE GEO_SPATIAL.GEOTYPES (
	ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	SHAPE ST_GEOMETRY(0)
);

-- add each of the 8 spatial subtypes

-- circularstring
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_CircularString('CIRCULARSTRING(0 0, 1 1, 0 2)')
);
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_CircularString('CIRCULARSTRING(0 0, 1 1, 0 2, -1 1, 0 0 )')
);

-- linestring
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_LineString('LineString (0 0, 5 10)')
);
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_LineString('LineString (0 0, 5 10, 5 6)')
);

-- multi-line string
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_MultiLineString('MultiLineString ((10 10, 12 12), (14 10, 16 12))')
);

-- point
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_Point('Point (10 10)')
);

-- multi-point
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_MultiPoint('MultiPoint ((10 10), (12 12), (14 10))')
);

-- polygon
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_Polygon('Polygon ((-5 -5, 5 -5, 0 5, -5 -5))')
);

-- multi-polygon
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_MultiPolygon('MultiPolygon (((-5 -5, 5 -5, 0 5, -5 -5), (-2 -2, -2 0, 2 0, 2 -2, -2 -2)), ((10 -5, 15 5, 5 5, 10 -5)))')
);

-- geometry collection
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	New ST_GeometryCollection( 'GeometryCollection (LineString(5 10, 10 12, 15 10), Polygon ((10 -5, 15 5, 5 5, 10 -5)))')
);

SELECT	*,
	SHAPE.ST_AsWKT() AS SHAPE
FROM GEO_SPATIAL.GEOTYPES;

-- polygon with issues
INSERT INTO GEO_SPATIAL.GEOTYPES VALUES (
	NEW ST_Polygon('Polygon ((-5 -5, 5 -5, 0 5, -6 -6))')
);


--------------------------------
--
--  multi-dimensional spatial data
--
--------------------------------

-- create table and add data, some multi-dimensional, to table

DROP TABLE GEO_SPATIAL.GEOMULTIDIM;
CREATE COLUMN TABLE GEO_SPATIAL.GEOMULTIDIM (
	ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
 	GEO ST_GEOMETRY
 );  

INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT (5.0 6.0)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT Z(5.0 6.0 8.0)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT M(5.0 6.0 1400)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT('POINT ZM(2 3 4 1000)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POINT()
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_LINESTRING('LINESTRING ZM(3 3 4 2500, 5 4 2 2600, 6 3 3 2200)')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_LINESTRING()
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POLYGON('POLYGON ZM((6 7 4 1800, 10 3 4 1850, 10 10 4 1900, 6 7 4 1800))')
);
INSERT INTO GEO_SPATIAL.GEOMULTIDIM VALUES(
	NEW ST_POLYGON()
);

-- use some multi-dimensional methods to retrieve values

SELECT	ID, 
	GEO.ST_AsWKT(),
	--GEO.ST_Z(), 
	GEO.ST_ZMAX(), 
	GEO.ST_ZMIN(),
	--GEO.ST_M(), 
	GEO.ST_MMAX(), 
	GEO.ST_MMIN()
FROM GEO_SPATIAL.GEOMULTIDIM; 

-- return only 3d or measured points

SELECT	ID, 
	GEO.ST_AsWKT(),
	CASE GEO.ST_Is3D()
 		WHEN 1 THEN GEO.ST_Z()
 		END,
	CASE GEO.ST_IsMeasured()
 		WHEN 1 THEN GEO.ST_M()
 		END
FROM GEO_SPATIAL.GEOMULTIDIM
WHERE GEO.ST_GeometryType() = 'ST_Point' 
	AND (GEO.ST_Is3D() = 1 
	OR GEO.ST_IsMeasured() = 1);
